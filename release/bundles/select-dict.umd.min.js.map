{
  "version": 3,
  "file": "select-dict.umd.min.js",
  "sources": [
    "ng://select-dict/out/select-dict-choices/highlight-choice.directive.ts",
    "ng://select-dict/out/select-dict.pipe.ts",
    "ng://select-dict/out/select-match.directive.ts",
    "ng://select-dict/out/select-dict-choices/select-dict-choices.component.ts",
    "ng://select-dict/out/select-search.directive.ts",
    "ng://select-dict/out/select-dict.service.ts",
    "ng://select-dict/out/select-dict.component.ts"
  ],
  "sourcesContent": [
    "import {AfterViewInit, Directive, ElementRef, Input, OnChanges, Renderer2} from '@angular/core';\n\n@Directive({\n  selector: '[appHighlightChoice]'\n})\nexport class HighlightChoiceDirective implements AfterViewInit, OnChanges{\n  @Input() appHighlightChoice;\n\n  constructor(private el: ElementRef, private renderer: Renderer2) { }\n\n  ngAfterViewInit() {\n\n  }\n\n  ngOnChanges(changes) {\n    if (changes.appHighlightChoice && changes.appHighlightChoice.currentValue) {\n      this.renderer.addClass(this.el.nativeElement, 'highlighted')\n    }\n    else {\n      this.renderer.removeClass(this.el.nativeElement, 'highlighted')\n    }\n  }\n}\n",
    "import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'selectDict'\n})\nexport class SelectDictPipe implements PipeTransform {\n\n  transform(value: any[], prop, search): any {\n    return value.filter((item) => item[prop].toLowerCase().indexOf(search.toLowerCase()) !== -1);\n  }\n\n}\n",
    "import {AfterViewInit, Directive, ElementRef, Input} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n@Directive({\n  selector: '[appSelectMatch]'\n})\nexport class SelectMatchDirective implements AfterViewInit {\n  @Input() focus: Subject<any>;\n\n  constructor(private el: ElementRef) {\n  }\n\n  ngAfterViewInit() {\n    this.focus.subscribe(() => {\n      setTimeout(() => this.el.nativeElement.focus());\n    });\n  }\n}\n",
    "import {\n  AfterViewChecked,\n  AfterViewInit, Component, ElementRef, EventEmitter, Input, OnChanges, OnInit, Output,\n  TemplateRef\n} from '@angular/core';\n\n@Component({\n  selector: 'app-select-dict-choices',\n  template: `<div class=\"dropdown-menu show\"\n     style=\"position: absolute;\n       transform: translate3d(0, 38px, 0);\n       top: 0;\n       left: 0;\n       will-change: transform;\">\n  <a class=\"dropdown-item previous-page\"\n     [ngClass]=\"{'highlighted':this.activeIndex === 'prevPage'}\"\n     [hidden]=\"!showPreviousPageButton\"\n     (click)=\"getPrevPage()\"><<<</a>\n  <a class=\"dropdown-item choice hide-overflowed-text\"\n     [appHighlightChoice]=\"i === activeIndex\"\n     *ngFor=\"let item of choices; trackBy: trackByDictionary; let i = index\"\n     (click)=\"selectItem($event, item)\">\n    <ng-template\n      [ngTemplateOutlet]=\"template\"\n      [ngTemplateOutletContext]=\"{$implicit: item}\">\n    </ng-template>\n  </a>\n  <a class=\"dropdown-item next-page\"\n     [hidden]=\"!showNextPageButton\"\n     [ngClass]=\"{'highlighted':this.activeIndex === 'nextPage'}\"\n     (click)=\"getNextPage()\">>>></a>\n</div>\n`,\n  styles: [`:host(.sm) .dropdown-menu{\r\n  font-size:0.875rem;\r\n  line-height:1.5;\r\n}\r\n\r\n:host(.sm) .dropdown-item{\r\n  padding:0.25rem 0.75rem;\r\n}\r\n\r\n:host(.active){\r\n  border-width:3px;\r\n}\r\n\r\n:host{\r\n  display:block;\r\n}\r\n\r\n.dropdown-menu{\r\n  width:100%;\r\n  max-height:200px;\r\n  margin-bottom:10px;\r\n  overflow-y:auto;\r\n  padding:0.2rem 0;\r\n}\r\n\r\n.dropdown-item{\r\n  padding:0.5rem 0.75rem;\r\n  cursor:pointer;\r\n  overflow-x:hidden;\r\n}\r\n\r\n.dropdown-item:active{\r\n  color:white !important;\r\n}\r\n\r\n.dropdown-item.highlighted, .dropdown-item.highlighted:hover{\r\n  background-color:#007bff;\r\n  color:#fff !important;\r\n}\r\n`]\n})\nexport class SelectDictChoicesComponent implements OnChanges, OnInit, AfterViewChecked {\n  @Input() template: TemplateRef<any>;\n  @Input() choices: any[];\n  @Input() active: any;\n  @Input() activeIndex;\n  @Input() showNextPageButton: boolean;\n  @Input() showPreviousPageButton: boolean;\n  @Input() search;\n  @Input() indexBy;\n\n  @Output() onSelect = new EventEmitter();\n  @Output() nextPage = new EventEmitter();\n  @Output() prevPage = new EventEmitter();\n\n  dropDownMenuElem;\n\n  constructor(private ref: ElementRef) {\n\n  }\n\n  ngOnInit() {\n    this.dropDownMenuElem = this.ref.nativeElement.querySelector('.dropdown-menu');\n  }\n\n  selectItem($event, item) {\n    this.onSelect.emit({$event, item});\n  }\n\n  _ensureHighlightVisible() {\n    const choices = this.dropDownMenuElem.querySelectorAll('.choice');\n    if (!choices.length) return;\n    let highlightedChoice;\n    if (this.activeIndex === 'prevPage') {\n      highlightedChoice = this.dropDownMenuElem.querySelector('.previous-page');\n    }\n    else if (this.activeIndex === 'nextPage') {\n      highlightedChoice = this.dropDownMenuElem.querySelector('.next-page');\n    }\n    else if (this.activeIndex !== -1){\n      highlightedChoice = choices[this.activeIndex];\n    }\n    else {\n      this.scrollToTop();\n      return;\n    }\n\n    const posY = highlightedChoice.offsetTop + highlightedChoice.clientHeight - this.dropDownMenuElem.scrollTop;\n    const height = this.dropDownMenuElem.offsetHeight;\n\n    if (posY > height) {\n      this.dropDownMenuElem.scrollTop += posY - height;\n    } else if (posY < highlightedChoice.clientHeight) {\n      if (this.activeIndex === 0) {\n        this.dropDownMenuElem.scrollTop = 0; //To make group header visible when going all the way up\n      } else {\n        this.dropDownMenuElem.scrollTop -= highlightedChoice.clientHeight - posY;\n      }\n    }\n  }\n\n  scrollToTop() {\n    this.dropDownMenuElem.scrollTop = 0;\n  }\n\n  trackByDictionary(index, item) {\n    return item ? item[this.indexBy] : null;\n  }\n\n  getNextPage() {\n    this.nextPage.emit();\n  }\n\n  getPrevPage() {\n    this.prevPage.emit();\n  }\n\n  ngOnChanges(changesObj) {\n    if (changesObj.activeIndex && changesObj.choices) {\n      setTimeout(() => this._ensureHighlightVisible());\n    }\n    else if (changesObj.activeIndex && !changesObj.choices) {\n      this._ensureHighlightVisible();\n    }\n  }\n\n  ngAfterViewChecked() {\n\n  }\n\n  ngDoCheck() {\n\n  }\n}\n",
    "import {AfterViewInit, Directive, ElementRef, Input} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n@Directive({\n  selector: '[appSelectSearch]'\n})\nexport class SelectSearchDirective implements AfterViewInit {\n  @Input() focus: Subject<any>;\n\n  constructor(private el: ElementRef) {\n  }\n\n  ngAfterViewInit() {\n    if (!this.focus) return;\n    this.focusElement();\n    this.focus.subscribe(() => this.focusElement());\n  }\n\n  focusElement() {\n    setTimeout(() => this.el.nativeElement.focus())\n  }\n}\n",
    "import {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {IDictListContainer} from './select-dict.component';\nimport {HttpClient} from '@angular/common/http';\n\nexport interface ISelectDictService {\n  getPage(dictionary_name: string, params?: any): Observable<IDictListContainer>\n}\n\n@Injectable()\nexport class SelectDictService implements ISelectDictService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  getPage(dictionary_name: string, params?: any) {\n    const options = {\n      withCredentials: true,\n      params\n    };\n    return <Observable<IDictListContainer>>this.http.get(dictionary_name, options)\n  }\n}\n",
    "import {Component, ContentChild, ElementRef, forwardRef, HostListener, Input, OnInit, ViewChild} from '@angular/core';\nimport {findIndex} from 'lodash/array';\nimport {cloneDeep} from 'lodash/lang';\nimport {assign} from 'lodash/object'\n\nimport {Subject} from 'rxjs/Subject';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/toPromise'\nimport {SelectDictChoicesComponent} from './select-dict-choices/select-dict-choices.component';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {SelectDictPipe} from './select-dict.pipe';\nimport {Subscription} from 'rxjs/Subscription';\nimport {SelectDictService} from './select-dict.service';\n\nexport interface IDictListContainer {\n  total: number;\n  size: number;\n  list: any[]\n}\n\n@Component({\n  selector: 'app-select-dict',\n  template: `<div *ngIf=\"label\" class=\"form-group\">\n  <label>{{label}}</label>\n  <div class=\"select-dict dropdown\">\n    <div class=\"form-control dropdown-toggle hide-overflowed-text\"\n         [ngClass]=\"size === 'sm' ? 'form-control-sm' : ''\"\n         tabindex=\"0\"\n         appSelectMatch\n         [focus]=\"focusMatch\"\n         [hidden]=\"opened\"\n         (keydown.enter)=\"onOpen()\"\n         (click)=\"onOpen($event)\">\n      <ng-template *ngIf=\"selected\"\n                   [ngTemplateOutlet]=\"matchTemplate\"\n                   [ngTemplateOutletContext]=\"{$implicit: selected}\">\n      </ng-template>\n      <span *ngIf=\"!selected\">{{placeholder || label}}</span>\n    </div>\n    <input\n      *ngIf=\"opened\"\n      #searchInput\n      class=\"form-control search-input\"\n      [ngClass]=\"size === 'sm' ? 'form-control-sm' : ''\"\n      appSelectSearch\n      [focus]=\"focusSearch\"\n      (keyup)=\"onSearch(searchInput.value)\"\n      (keydown.enter)=\"selectHighlighted()\"\n      (keydown.arrowup)=\"activatePrev()\"\n      (keydown.arrowdown)=\"activateNext()\">\n    <app-select-dict-choices\n      *ngIf=\"opened\"\n      [choices]=\"items\"\n      [indexBy]=\"indexBy\"\n      [search]=\"search\"\n      [showPreviousPageButton]=\"longList && page !== 0\"\n      [showNextPageButton]=\"longList && !(items?.length < listSize)\"\n      [active]=\"active\"\n      [activeIndex]=\"activeIndex\"\n      [template]=\"choicesTemplate\"\n      (onSelect)=\"onSelect($event)\"\n      (nextPage)=\"getNextPage()\"\n      (prevPage)=\"getPrevPage()\"\n    ></app-select-dict-choices>\n  </div>\n</div>\n<div *ngIf=\"label === undefined || label === null\" class=\"select-dict dropdown\">\n  <div class=\"form-control dropdown-toggle hide-overflowed-text\"\n       [ngClass]=\"size === 'sm' ? 'form-control-sm' : ''\"\n       tabindex=\"0\"\n       appSelectMatch\n       [focus]=\"focusMatch\"\n       [hidden]=\"opened\"\n       (keydown.enter)=\"onOpen()\"\n       (click)=\"onOpen($event)\">\n    <ng-template *ngIf=\"selected\"\n                 [ngTemplateOutlet]=\"matchTemplate\"\n                 [ngTemplateOutletContext]=\"{$implicit: selected}\">\n    </ng-template>\n    <div class=\"placeholder\" *ngIf=\"!selected\">{{placeholder || label}}</div>\n  </div>\n  <input\n    *ngIf=\"opened\"\n    #searchInput\n    class=\"form-control search-input\"\n    [ngClass]=\"size === 'sm' ? 'form-control-sm' : ''\"\n    appSelectSearch\n    [focus]=\"focusSearch\"\n    (keyup)=\"onSearch(searchInput.value)\"\n    (keydown.enter)=\"selectHighlighted()\"\n    (keydown.arrowup)=\"activatePrev()\"\n    (keydown.arrowdown)=\"activateNext()\">\n  <app-select-dict-choices\n    [ngClass]=\"size === 'sm' ? 'sm' : ''\"\n    *ngIf=\"opened\"\n    [choices]=\"items\"\n    [indexBy]=\"indexBy\"\n    [search]=\"search\"\n    [showPreviousPageButton]=\"longList && page !== 0\"\n    [showNextPageButton]=\"longList && !(items?.length < listSize)\"\n    [active]=\"active\"\n    [activeIndex]=\"activeIndex\"\n    [template]=\"choicesTemplate\"\n    (onSelect)=\"onSelect($event)\"\n    (nextPage)=\"getNextPage()\"\n    (prevPage)=\"getPrevPage()\"\n  ></app-select-dict-choices>\n</div>\n`,\n  styles: [`.select-dict div.form-control{\r\n  cursor:pointer;\r\n  padding-right:38px;\r\n  overflow-x:hidden;\r\n}\r\n\r\n.select-dict .dropdown-toggle:after{\r\n  position:absolute;\r\n  top:50%;\r\n  right:15px;\r\n  -webkit-transform:translateY(-50%);\r\n          transform:translateY(-50%);\r\n}\r\n\r\n.select-dict .hide-overflowed-text{\r\n  overflow-x:hidden;\r\n  text-overflow:ellipsis;\r\n  white-space:nowrap;\r\n}\r\n\r\n.placeholder{\r\n  height:1.3rem;\r\n}\r\n`],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SelectDictComponent),\n      multi: true\n    }\n  ]\n})\nexport class SelectDictComponent implements OnInit, ControlValueAccessor {\n  @Input() selected;\n  @Input() url;\n  @Input() indexBy = 'id';\n  @Input() filterBy = 'name';\n  @Input() label: string;\n  @Input() placeholder: string;\n  @Input() options;\n  @Input() size: 'sm' | null;\n\n  dictFilter = new SelectDictPipe();\n\n  focusMatch = new Subject();\n  focusSearch = new Subject();\n\n  items: any[] = [];\n  _items: any[] = [];\n\n  search: string;\n  active = null;\n  activeIndex: 'nextPage' | 'prevPage' | number = -1;\n\n  initialQuery = true;\n  longList = false;\n  listSize = 50;\n  page = 0;\n  allInMemory = false;\n  lastRemoteSearch: string;\n\n  opened = false;\n\n  propagateChange = (_: any) => {\n  };\n\n  @ContentChild('selectMatch') matchTemplate;\n  @ContentChild('selectChoices') choicesTemplate;\n\n  @ViewChild(SelectDictChoicesComponent) choicesComponent: SelectDictChoicesComponent;\n\n  @HostListener('document:click', ['$event'])\n  clickHandler(event) {\n    let selectDictContainer = this.eRef.nativeElement.querySelector('.select-dict');\n    if (!selectDictContainer.contains(event.target) && this.opened) {\n      this.onClose();\n    }\n  }\n\n  constructor(private eRef: ElementRef, private dictService: SelectDictService) {\n  }\n\n  ngOnInit() {\n\n  }\n\n  onSelect($event) {\n    this.selected = $event.item;\n    this.propagateChange(this.selected);\n    this.onClose();\n  }\n\n  onOpen($event?) {\n    this.opened = true;\n    this.active = this.selected;\n    this.request();\n  }\n\n  onClose() {\n    this.opened = false;\n    this.resetComponent();\n  }\n\n  resetComponent() {\n    this.items = [];\n    this.active = null;\n    this.activeIndex = -1;\n    this.page = 0;\n    this.search = '';\n    this.focusMatch.next();\n  }\n\n  /*TODO create this functionality*/\n  onClear() {\n\n  }\n\n  onSearch(value: string) {\n    if (this.search !== value) {\n      this.search = value;\n      this.searchItem();\n    }\n  }\n\n  searchItem() {\n    this.page = 0;\n    if (this.needToLoadData()) this.request();\n    else {\n      this.items = this.dictFilter.transform(this._items, this.filterBy, this.search);\n      if (this.active) {\n        this.activeIndex = this.getActiveIndex();\n      }\n      else {\n        this.activeIndex = -1;\n      }\n    }\n  }\n\n  selectHighlighted() {\n    if (this.activeIndex === 'prevPage') {\n      this.getPrevPage();\n    }\n    else if (this.activeIndex === 'nextPage') {\n      this.getNextPage();\n    }\n    else {\n      this.onSelect({$event: null, item: this.active});\n    }\n  }\n\n  activateNext() {\n    this.setActiveItem('next');\n  }\n\n  activatePrev() {\n    this.setActiveItem('prev');\n  }\n\n  request(): Subscription {\n    let params = {\n      [this.filterBy]: this.search ? this.search : '',\n      count: this.listSize,\n      from: this.page * this.listSize\n    };\n\n    assign(params, this.options);\n\n    return this.dictService.getPage(this.url, params)\n      .subscribe((container: IDictListContainer) => {\n        if (this.initialQuery) {\n          this.initialQuery = false;\n          this.longList = container.total < 0 || container.total > container.size;\n        }\n        this._items = container.list;\n        this.items = cloneDeep(this._items);\n\n        this.lastRemoteSearch = <string>params[this.filterBy];\n        this.allInMemory = this.page === 0 && container.size < this.listSize;\n\n        this.activeIndex = this.active ? this.getActiveIndex() : -1;\n\n        this.choicesComponent.scrollToTop();\n        this.choicesComponent._ensureHighlightVisible();\n      });\n  }\n\n  getNextPage() {\n    this.page++;\n    this.focusSearch.next();\n    this.request();\n  }\n\n  getPrevPage() {\n    this.page--;\n    this.focusSearch.next();\n    this.request();\n  }\n\n  setActiveItem(direction: ('next' | 'prev')) {\n    let itemsLength = this.items.length;\n    if (this.activeIndex === -1) {\n      if (this.longList && this.page !== 0) {\n        this.activeIndex = 'prevPage';\n      }\n      else if (itemsLength) {\n        this.activeIndex = 0;\n      }\n    }\n    else {\n      // previous item\n      if (direction === 'prev') {\n        if (typeof this.activeIndex !== 'string') {\n          if (this.activeIndex !== 0) {\n            this.activeIndex--;\n          }\n          else if (this.longList && this.page !== 0) {\n            this.activeIndex = 'prevPage';\n          }\n        }\n        else if (this.activeIndex === 'nextPage') {\n          this.activeIndex = itemsLength - 1;\n        }\n      }\n      // next item\n      else {\n        if (typeof this.activeIndex !== 'string') {\n          if (this.activeIndex !== itemsLength - 1) {\n            this.activeIndex++;\n          }\n          // if next button available\n          else if (this.longList && !(itemsLength < this.listSize)) {\n            this.activeIndex = 'nextPage';\n          }\n        }\n        else if (this.activeIndex === 'prevPage') {\n          this.activeIndex = 0;\n        }\n      }\n    }\n\n    this.active = this.activeIndex !== -1 && typeof this.activeIndex !== 'string' ? this.items[this.activeIndex] : null;\n  }\n\n  getActiveIndex() {\n    return findIndex(this.items, item => item[this.indexBy] === this.active[this.indexBy]);\n  }\n\n  writeValue(value: any) {\n    this.selected = value;\n  }\n\n  registerOnChange(fn) {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched() {\n  }\n\n  needToLoadData() {\n    if (this.longList) {\n      return !this.allInMemory || this.search.indexOf(this.lastRemoteSearch) === -1\n    }\n    return false;\n  };\n}\n"
  ],
  "names": [
    "this",
    "el",
    "renderer",
    "changes",
    "appHighlightChoice",
    "currentValue",
    "addClass",
    "nativeElement",
    "removeClass",
    "HighlightChoiceDirective",
    "type",
    "Directive",
    "args",
    "selector",
    "ElementRef",
    "Renderer2",
    "Input",
    "SelectDictPipe",
    "prototype",
    "transform",
    "value",
    "prop",
    "search",
    "filter",
    "item",
    "toLowerCase",
    "indexOf",
    "decorators",
    "Pipe",
    "SelectMatchDirective",
    "ngAfterViewInit",
    "_this",
    "focus",
    "subscribe",
    "setTimeout",
    "SelectDictChoicesComponent",
    "ref",
    "onSelect",
    "EventEmitter",
    "nextPage",
    "ngOnInit",
    "selectItem",
    "$event",
    "_ensureHighlightVisible",
    "choices",
    "dropDownMenuElem",
    "querySelectorAll",
    "length",
    "highlightedChoice",
    "activeIndex",
    "querySelector",
    "scrollToTop",
    "posY",
    "offsetTop",
    "clientHeight",
    "scrollTop",
    "height",
    "offsetHeight",
    "trackByDictionary",
    "index",
    "getNextPage",
    "getPrevPage",
    "ngOnChanges",
    "changesObj",
    "SelectSearchDirective",
    "propDecorators",
    "SelectDictService",
    "http",
    "params",
    "ctorParameters",
    "HttpClient",
    "SelectDictComponent",
    "eRef",
    "dictService",
    "dictFilter",
    "items",
    "page",
    "clickHandler",
    "event",
    "active",
    "selected",
    "resetComponent",
    "focusMatch",
    "next",
    "onClear",
    "_items",
    "filterBy",
    "activatePrev",
    "setActiveItem",
    "_a",
    "count",
    "listSize",
    "from",
    "getPage",
    "url",
    "container",
    "initialQuery",
    "longList",
    "total",
    "size",
    "allInMemory",
    "getActiveIndex",
    "choicesComponent",
    "focusSearch",
    "request",
    "direction",
    "itemsLength",
    "writeValue",
    "registerOnChange",
    "fn",
    "propagateChange",
    "registerOnTouched",
    "needToLoadData",
    "lastRemoteSearch",
    "Component",
    "template",
    "styles",
    "providers",
    "provide",
    "NG_VALUE_ACCESSOR",
    "useExisting",
    "forwardRef",
    "multi",
    "label",
    "placeholder",
    "ViewChild",
    "HostListener",
    "SelectDictModule",
    "NgModule",
    "imports",
    "FormsModule",
    "declarations"
  ],
  "mappings": "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"
}
